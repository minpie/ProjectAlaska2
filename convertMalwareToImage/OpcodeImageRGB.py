from PIL import Image
import sys
import math
import os
import pefile
import distorm3
import hashlib


# Messages:
MSG_Usage = """
Usage:

"""


# 변수 / 객체 / etc :
jumpCommandList = ["ja", "jb", "jae", "jbe", "je", "jne", "jcxz", "jc", "jnc", "jo", "jno", "jp", "jpe", "jnp", "jpo", "js", "jns", "jmp", "jnz", "jz", "jg", "jl", "jle", "jnle", "jnl", "jnge", "jng"]
inputFileName = "" # 이미지화 대상 파일
outputFileName = "" # 저장할 이미지 파일


inputFilePeObject = None # 이미지화 대상 파일의 PE 객체
outputImageObject = None # 저장할 이미지에 해당하는 객체
imageWidth = 0 # 이미지 폭
imageHeight = 0 # 이미지 높이
inputFileSize = 0 # 입력파일 크기
blockList = [] # opcode들을 basic block단위(비슷하게)별로 묶어놓은 리스트
startPos = 0 # PE file position counter
currentPos = 0 # PE file position counter
currentPixel = 0 # 현재 읽고 있는 데이터
countPixel = 0 # 작업중인 픽셀 카운터


# 함수 선언:
def getTextSection(peObj):
    # PE 파일 .text 섹션 내용 반환
    for i in peObj.sections:
        if (i.Name.decode("utf-8").rstrip("\x00") == ".text"):
            return i.get_data()

def getPeObject(peFilePath):
    # pefile 객체 반환
    return pefile.PE(peFilePath)

def getMd5(targetVal):
    # MD5값 반환
    return hashlib.md5(targetVal).hexdigest()


# Main code:
if(len(sys.argv) == 1):
    print(MSG_Usage)
    sys.exit()
inputFileName = sys.argv[1]
outputFileName = sys.argv[2]


# 디스어셈블 & 블록 분리:
pe = pefile.PE(inputFileName) # PE File 객체
textSec = pe.sections[0] # text 섹션
disasm = distorm3.Decode(0, textSec.get_data(), distorm3.Decode64Bits) # 디스어셈블


for (offset, size, instr, hexdump) in disasm:
    #print(instr)# 어셈블리 코드 출력
    for i in jumpCommandList:
        if(i in instr.lower()):
            blockList.append(disasm[startPos:currentPos+1])
            startPos = currentPos +1
    currentPos += 1


# 파일 크기 및 basic-block 수 측정하여 이미지 폭/높이 계산:
inputFileSize = os.path.getsize(inputFileName) # 파일 크기 측정
imageWidth = 32 # 폭: 고정치로 설정
imageHeight = round(len(blockList) / imageWidth) # 높이: 반올림(basic-block 수 / 32)


# 이미지 객체 생성:
outputImageObject = Image.new(mode="RGB", size=(imageWidth, imageHeight)) # 파일 객체 생성




for i in range(len(blockList)):
    opcodeStr = ""
    for j in blockList[countPixel]:
        (offset, size, instr, hexdump) = j
        opcodeStr += instr
    opcodeHash = getMd5(opcodeStr.encode("utf-8")) # SHA-1 값 획득
    
    
    # RGB값 만들기:
    colorR = int(bin(int(opcodeHash, 16)).replace("0b", "")[0:8], 2)
    colorG = int(bin(int(opcodeHash, 16)).replace("0b", "")[9:16], 2)
    colorB = int(bin(int(opcodeHash, 16)).replace("0b", "")[17:24], 2)
    currentPixel = (colorR, colorG, colorB) # (R, G, B)
    
    
    # 현재 위치 계산:
    curX = (countPixel % imageWidth) # x좌표
    curY = int(countPixel / imageWidth) # y좌표
    
    # 픽셀 지정:
    outputImageObject.putpixel((curX, curY), currentPixel) # 한 픽셀 지정
    countPixel += 1 # 위치 카운터 증가

# 이미지로 저장:

outputImageObject.save(outputFileName) # 이미지로 저장
# End
